import click as ck
import pandas as pd
import gzip

@ck.command()
@ck.option(
    '--data-file', '-df', default='data/swissprot_exp_annots.pkl',
    help='Data file generated by uni2pandas script')
@ck.option(
    '--inter-file', '-if', default=f'data/protein.links.full.v11.0.txt.gz',
    help='Data file with interactions from STRING DB')
@ck.option(
    '--out-file', '-of', default='data/swissprot_interactions.pkl',
    help='Result file with a list of proteins, sequences, annotations and interactions')
def main(data_file, inter_file, out_file):
    df = pd.read_pickle(data_file)
    st2uni = {}
    for i, row in enumerate(df.itertuples()):
        prot_id = row.proteins
        for st_id in row.string_ids:
            st2uni[st_id] = prot_id
    proteins = set(df['proteins'].values)

    interactions = {}
    with gzip.open(inter_file, 'rt') as f:
        next(f)
        for line in f:
            it = line.strip().split()
            p1 = it[0]
            p2 = it[1]
            # coex_score = float(it[5])
            # exp_score = float(it[6])
            com_score = float(it[15])
            # Ignore zero experimental score and less than 700 combined
            if com_score < 700:
                continue
            # Ignore proteins without sequence info
            if p1 not in st2uni or p2 not in st2uni:
                continue
            p1, p2 = st2uni[p1], st2uni[p2]
            if p1 == p2:
                continue
            if p1 not in interactions:
                interactions[p1] = []
            if p2 not in interactions:
                interactions[p2] = []
            interactions[p1].append(p2)
            interactions[p2].append(p1)

    inters = []
    c = 0
    for i, row in df.iterrows():
        prot_id = row.proteins
        if prot_id in interactions:
            inters.append(interactions[prot_id])
            c += 1
        else:
            inters.append([])

    df['interactions'] = inters

    df.to_pickle(out_file)
    print('Saved data file with ', c, 'interactions')



if __name__ == '__main__':
    main()
